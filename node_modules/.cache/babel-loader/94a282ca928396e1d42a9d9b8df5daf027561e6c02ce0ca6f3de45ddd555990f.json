{"ast":null,"code":"import _slicedToArray from \"C:/Users/nandi/Downloads/q6_scaffold/q6_scaffold/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"C:\\\\Users\\\\nandi\\\\Downloads\\\\q6_scaffold\\\\q6_scaffold\\\\src\\\\components\\\\ExpenseForm\\\\ExpenseForm.js\",\n  _this = this,\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import styles from \"./ExpenseForm.module.css\";\n\n// const ExpenseForm = ({ addExpense, editingExpense ,updateExpense  }) => {\n//   const expenseTextInput = useRef();\n//   const expenseAmountInput = useRef();\n//   const [isEditing, setIsEditing] = useState(false);\n\n//   // Use the useEffect hook here, to check if an expense is to be updated\n//   // If yes, the autofill the form values with the text and amount of the expense\n//   useEffect(() => {\n//     if (editingExpense) {\n//       setIsEditing(true);\n//     } else {\n//       setIsEditing(false);\n//       clearInput();\n//     }\n//   }, [editingExpense]);\n\n//   const onSubmitHandler = (e) => {\n//     e.preventDefault();\n//     const expenseText = expenseTextInput.current.value;\n//     const expenseAmount = expenseAmountInput.current.value;\n//     if (parseInt(expenseAmount) === 0) {\n//       return;\n//     }\n\n//     const expense = {\n//       text: expenseText,\n//       amount: expenseAmount,\n//       id: new Date().getTime()\n//     };\n//     if(isEditing){\n//       updateExpense(expense,expense.id)\n//     }else{\n//     addExpense(expense);\n//     }\n//     clearInput();\n//     return;\n\n//     // Logic to update expense here\n//   };\n\n//   const clearInput = () => {\n//     expenseAmountInput.current.value = \"\";\n//     expenseTextInput.current.value = \"\";\n//   };\n\n//   return (\n//     <form className={styles.form} onSubmit={onSubmitHandler}>\n//       {/* Change text to Edit Transaction if an expense is to be updated */}\n//       <h3>Add new transaction</h3>\n//       <label htmlFor=\"expenseText\">Text</label>\n//       <input\n//         id=\"expenseText\"\n//         className={styles.input}\n//         type=\"text\"\n//         placeholder=\"Enter text...\"\n//         ref={expenseTextInput}\n//         required\n//       />\n//       <div>\n//         <label htmlFor=\"expenseAmount\">Amount</label>\n//         <div>(negative - expense,positive-income)</div>\n//       </div>\n//       <input\n//         className={styles.input}\n//         id=\"expenseAmount\"\n//         type=\"number\"\n//         placeholder=\"Enter amount...\"\n//         ref={expenseAmountInput}\n//         required\n//       />\n//       <button className={styles.submitBtn}>\n//         {/* Change text to Edit Transaction if an expense is to be updated */}\n//         Add Transaction\n//       </button>\n//     </form>\n//   );\n// };\n\n// export default ExpenseForm;\nimport React, { useEffect, useRef, useState } from \"react\";\nimport styles from \"./ExpenseForm.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ExpenseForm = function ExpenseForm(_ref) {\n  _s();\n  var addExpense = _ref.addExpense,\n    editingExpense = _ref.editingExpense,\n    changeExpenseToUpdate = _ref.changeExpenseToUpdate;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isEditing = _useState2[0],\n    setIsEditing = _useState2[1];\n  var expenseTextInput = useRef();\n  var expenseAmountInput = useRef();\n  useEffect(function () {\n    if (editingExpense) {\n      setIsEditing(true);\n      //  ?\n    } else {\n      setIsEditing(false);\n      clearInput();\n    }\n  }, [editingExpense]);\n  var onSubmitHandler = function onSubmitHandler(e) {\n    e.preventDefault();\n    var expenseText = expenseTextInput.current.value;\n    var expenseAmount = expenseAmountInput.current.value;\n    if (parseInt(expenseAmount) === 0) {\n      return;\n    }\n    var expense = {\n      text: expenseText,\n      amount: expenseAmount,\n      id: isEditing ? editingExpense.id : new Date().getTime()\n    };\n    if (isEditing) {\n      changeExpenseToUpdate(expense.id, expense);\n    } else {\n      addExpense(expense);\n    }\n    clearInput();\n  };\n  var clearInput = function clearInput() {\n    expenseAmountInput.current.value = \"\";\n    expenseTextInput.current.value = \"\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: styles.form,\n    onSubmit: onSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: isEditing ? \"Edit Transaction\" : \"Add new transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"expenseText\",\n      children: \"Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"expenseText\",\n      className: styles.input,\n      type: \"text\",\n      placeholder: \"Enter text...\",\n      ref: expenseTextInput,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"expenseAmount\",\n        children: \"Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"(negative - expense, positive - income)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: styles.input,\n      id: \"expenseAmount\",\n      type: \"number\",\n      placeholder: \"Enter amount...\",\n      ref: expenseAmountInput,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.submitBtn,\n      children: isEditing ? \"Update Transaction\" : \"Add Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, _this);\n};\n_s(ExpenseForm, \"jZYVe+GwyQcLLTYSPDh1SL4DZ4M=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styles","jsxDEV","_jsxDEV","ExpenseForm","_ref","_s","addExpense","editingExpense","changeExpenseToUpdate","_useState","_useState2","_slicedToArray","isEditing","setIsEditing","expenseTextInput","expenseAmountInput","clearInput","onSubmitHandler","e","preventDefault","expenseText","current","value","expenseAmount","parseInt","expense","text","amount","id","Date","getTime","className","form","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","_this","htmlFor","input","type","placeholder","ref","required","submitBtn","_c","$RefreshReg$"],"sources":["C:/Users/nandi/Downloads/q6_scaffold/q6_scaffold/src/components/ExpenseForm/ExpenseForm.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\r\n// import styles from \"./ExpenseForm.module.css\";\r\n\r\n// const ExpenseForm = ({ addExpense, editingExpense ,updateExpense  }) => {\r\n//   const expenseTextInput = useRef();\r\n//   const expenseAmountInput = useRef();\r\n//   const [isEditing, setIsEditing] = useState(false);\r\n\r\n\r\n//   // Use the useEffect hook here, to check if an expense is to be updated\r\n//   // If yes, the autofill the form values with the text and amount of the expense\r\n//   useEffect(() => {\r\n//     if (editingExpense) {\r\n//       setIsEditing(true);\r\n//     } else {\r\n//       setIsEditing(false);\r\n//       clearInput();\r\n//     }\r\n//   }, [editingExpense]);\r\n\r\n//   const onSubmitHandler = (e) => {\r\n//     e.preventDefault();\r\n//     const expenseText = expenseTextInput.current.value;\r\n//     const expenseAmount = expenseAmountInput.current.value;\r\n//     if (parseInt(expenseAmount) === 0) {\r\n//       return;\r\n//     }\r\n\r\n//     const expense = {\r\n//       text: expenseText,\r\n//       amount: expenseAmount,\r\n//       id: new Date().getTime()\r\n//     };\r\n//     if(isEditing){\r\n//       updateExpense(expense,expense.id)\r\n//     }else{\r\n//     addExpense(expense);\r\n//     }\r\n//     clearInput();\r\n//     return;\r\n\r\n//     // Logic to update expense here\r\n//   };\r\n\r\n//   const clearInput = () => {\r\n//     expenseAmountInput.current.value = \"\";\r\n//     expenseTextInput.current.value = \"\";\r\n//   };\r\n\r\n//   return (\r\n//     <form className={styles.form} onSubmit={onSubmitHandler}>\r\n//       {/* Change text to Edit Transaction if an expense is to be updated */}\r\n//       <h3>Add new transaction</h3>\r\n//       <label htmlFor=\"expenseText\">Text</label>\r\n//       <input\r\n//         id=\"expenseText\"\r\n//         className={styles.input}\r\n//         type=\"text\"\r\n//         placeholder=\"Enter text...\"\r\n//         ref={expenseTextInput}\r\n//         required\r\n//       />\r\n//       <div>\r\n//         <label htmlFor=\"expenseAmount\">Amount</label>\r\n//         <div>(negative - expense,positive-income)</div>\r\n//       </div>\r\n//       <input\r\n//         className={styles.input}\r\n//         id=\"expenseAmount\"\r\n//         type=\"number\"\r\n//         placeholder=\"Enter amount...\"\r\n//         ref={expenseAmountInput}\r\n//         required\r\n//       />\r\n//       <button className={styles.submitBtn}>\r\n//         {/* Change text to Edit Transaction if an expense is to be updated */}\r\n//         Add Transaction\r\n//       </button>\r\n//     </form>\r\n//   );\r\n// };\r\n\r\n// export default ExpenseForm;\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport styles from \"./ExpenseForm.module.css\";\r\n\r\nconst ExpenseForm = ({ addExpense, editingExpense, changeExpenseToUpdate }) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const expenseTextInput = useRef();\r\n  const expenseAmountInput = useRef();\r\n\r\n  useEffect(() => {\r\n    if (editingExpense) {\r\n      setIsEditing(true);\r\n  //  ?\r\n    } else {\r\n      setIsEditing(false);\r\n      clearInput();\r\n    }\r\n  }, [editingExpense]);\r\n\r\n  const onSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    const expenseText = expenseTextInput.current.value;\r\n    const expenseAmount = expenseAmountInput.current.value;\r\n    \r\n    if (parseInt(expenseAmount) === 0) {\r\n      return;\r\n    }\r\n\r\n    const expense = {\r\n      text: expenseText,\r\n      amount: expenseAmount,\r\n      id: isEditing ? editingExpense.id : new Date().getTime(),\r\n    };\r\n\r\n    if (isEditing) {\r\n      changeExpenseToUpdate(expense.id, expense);\r\n    } else {\r\n      addExpense(expense);\r\n    }\r\n    \r\n    clearInput();\r\n  };\r\n\r\n  const clearInput = () => {\r\n    expenseAmountInput.current.value = \"\";\r\n    expenseTextInput.current.value = \"\";\r\n  };\r\n\r\n  return (\r\n    <form className={styles.form} onSubmit={onSubmitHandler}>\r\n      <h3>{isEditing ? \"Edit Transaction\" : \"Add new transaction\"}</h3>\r\n      <label htmlFor=\"expenseText\">Text</label>\r\n      <input\r\n        id=\"expenseText\"\r\n        className={styles.input}\r\n        type=\"text\"\r\n        placeholder=\"Enter text...\"\r\n        ref={expenseTextInput}\r\n        required\r\n      />\r\n      <div>\r\n        <label htmlFor=\"expenseAmount\">Amount</label>\r\n        <div>(negative - expense, positive - income)</div>\r\n      </div>\r\n      <input\r\n        className={styles.input}\r\n        id=\"expenseAmount\"\r\n        type=\"number\"\r\n        placeholder=\"Enter amount...\"\r\n        ref={expenseAmountInput}\r\n        required\r\n      />\r\n      <button className={styles.submitBtn}>\r\n        {isEditing ? \"Update Transaction\" : \"Add Transaction\"}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}